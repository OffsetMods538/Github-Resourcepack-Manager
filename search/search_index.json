{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>If you have any problems or questions, feel free to reach out to me on Discord by clicking here or the Discord icon at the bottom of your screen :D</p>"},{"location":"#why","title":"Why?","text":"<p>GitHub Resourcepack Manager is a mod meant only for servers, this isn't in any way useful for singleplayer or opening to LAN!</p> <p>I saw in one of XisumaVoid's videos (here) that they have a mod on HermitCraft which allows them to update their resource pack through GitHub. I tried searching for it on the internet, but couldn't find it, which is why I created this.</p>"},{"location":"#how","title":"How?","text":"<p>This mod hosts a webserver, on the same port as the Minecraft server, using netty, which listens to POST requests (webhook) sent by GitHub. After the mod is notified of an update to the GitHub repo, it uses jGit to download the contents of the GitHub repository. Once it has the repo downloaded it will either:</p> <ol> <li>If it finds a <code>pack.mcmeta</code> file in the resource pack directory: Pack the content of the repo into a <code>.zip</code> file and host it on the webserver.</li> <li>If it finds a <code>packs</code> folder in the resource pack directory: Unpack all the source packs and then pack those into a <code>.zip</code> file and host it on the webserver.</li> </ol> <p>After everything is done, it sends a message in chat notifying the players that there's a new pack available.</p>"},{"location":"reference/discord-webhook/","title":"Discord Webhook","text":"<p>todo</p>"},{"location":"reference/priority/","title":"Pack Priority","text":"<p>(This only applies to multi pack setups)</p>"},{"location":"reference/priority/#the-problem","title":"The problem","text":"<p>Imagine you have pack that applies high resolution textures to everything. Now imagine you wanted to add a pack that gives swords some custom models and textures. The problem comes from both packs needing to modify the same file (in this case <code>textures/item/diamond_sword.png</code>).</p> <p>The mod first (if needed) unpacks the provided packs and then goes through and copies the contents of them into a single output pack. If two packs provide the same file, the one that is copied later on will overwrite the first one.</p> <p>So how does the mod handle sorting the packs?</p>"},{"location":"reference/priority/#the-solution","title":"The solution","text":"<p>Priorities!</p> <p>Priorities tell the mod which packs to copy earlier. A priority is just a number, with the smallest one being <code>0</code>. (Meaning, no negatives!) A file must be prefixed with <code>PRIORITY-</code>. For example <code>20-</code>. Yes, the <code>-</code> is required. Here's an example of a pack with a priority of <code>10</code>: <code>10-FreshAnimations_v1.9.zip</code>.</p> <p>So what does the priority do? A pack with a higher priority number is applied earlier than one with a lower priority. This means that the lower priority value pack can overwrite files from the pack with a higher priority number.</p>"},{"location":"reference/priority/#examples","title":"Examples","text":"<p>Here's an example of the <code>packs</code> directory:</p> <ul> <li>packs/<ul> <li>0-base/</li> <li>10-FreshAnimations_v1.9.zip</li> </ul> </li> </ul> <p>In this case any file that's in the fresh animations pack can be overwritten by the base pack.</p> <p></p> <p>Here's another one:</p> <ul> <li>packs/<ul> <li>0-base/pack.mcmeta</li> <li>10-cool-sword/assets/textures/item/diamond_sword.png</li> <li>20-faithful.zip</li> </ul> </li> </ul> <p>In this case faithful provides high-res textures, the <code>cool-sword</code> pack overwrites some textures from faithful to have cool swords and the base pack is just there for the <code>pack.mcmeta</code> file.</p>"},{"location":"reference/update-message/","title":"Pack Update Message Format","text":""},{"location":"reference/update-message/#text-formatting","title":"Text formatting","text":"<p>The mod allows you to format your text, this means coloring it using vanilla color codes or hex colors and making it italic, bold, both, etc.</p>"},{"location":"reference/update-message/#new-line","title":"New line","text":"<p>You can split the message into multiple lines by adding <code>\\n</code> where you want a new line to begin. For example <code>\"First line\\nSecond line\"</code> is rendered like this: </p>"},{"location":"reference/update-message/#formatting-codes","title":"Formatting codes","text":"<p>You've probably heard of or even used Minecraft formatting codes before. You can use them here too! All you need to do is use the <code>&amp;</code> (and) symbol and then a formatting character after it. </p> <p>You can find all the formatting codes available in Minecraft here.</p> <p>For example <code>\"&amp;cHello!\"</code> would be rendered like this: </p> <p>And <code>\"&amp;l&amp;cHello!\"</code> would be rendered like this: </p>"},{"location":"reference/update-message/#hex-colors","title":"Hex colors","text":"<p>If those 16 colors aren't enough for you, then luckily you can also use hex colors! All you need to do is use the <code>&amp;</code> (and) symbol and then the hex code after it (including the <code>#</code>).</p> <p>You can use the Google color picker for picking hex colors.</p> <p>For example <code>\"&amp;#87CEFAHello!\"</code> would be rendered like this: </p> <p>You can also combine formatting codes with hex colors. For example <code>\"&amp;l&amp;#87CEFAHello!</code> would be rendered like this: </p> <p>For gradients, you can use this site. For example (generated using that site) <code>\"&amp;#FF0000O&amp;#FF3600f&amp;#FF6D00f&amp;#FFA400s&amp;#FFDA00e&amp;#DBFF00t&amp;#6DFF00M&amp;#00FF00o&amp;#00926Dn&amp;#0024DBk&amp;#1500DBe&amp;#3600A6y&amp;#55008E5&amp;#7500B03&amp;#9400D38\"</code> would be rendered like this: </p>"},{"location":"reference/update-message/#character-escaping","title":"Character escaping","text":"<p>If you want to use an <code>&amp;</code> (and) character without it doing any formatting, you can add two <code>\\</code> (back-slashes) before it. For example <code>\"This &amp; that\"</code> is rendered like this: </p> <p>But <code>\"This \\\\&amp; that\"</code> is rendered like this: </p>"},{"location":"reference/update-message/#placeholders","title":"Placeholders","text":"<p>If you want to include information about the commit that was pushed, you can use placeholders. Here's a list:</p> Placeholder Value {ref} The branch that was committed to. {lastCommitHash} The hash of the last commit before this one. {newCommitHash} The hash of the new commit. {repositoryName} The name of the repository. {repositoryFullName} The full name of the repository. {repositoryUrl} The url pointing to the repository. {repositoryVisibility} The visibility of the repository (public or private). {pusherName} The username of the person who pushed the commit. {headCommitMessage} The message of the latest commit. <p>Here's an example of using one: <code>\"New commit by {pusherName}.\\nDescription: {headCommitMessage}\"</code>: </p>"},{"location":"reference/update-message/#btw-these-screenshots-are-actually-from-minecrafttools-and-not-minecraft-lol","title":"* btw these screenshots are actually from minecraft.tools and not Minecraft lol.","text":""},{"location":"tutorials/installation/","title":"Installation","text":"<p>Before installing the mod, please make sure you're running a fabric server (which you can download here), the mod might work on other mod loaders, but there's no guarantee and it definitely will not work on forge. Please do feel free to test and tell me on discord if it does or does not work on anything other than fabric.</p> <p>Go to the Modrinth page (here) and download the latest version. You'll also need to download the dependencies of the mod. Fabric Api can be found here and MonkeyLib538 can be found here. Just download the latest version for the Minecraft version you're using. After you've downloaded the mod itself and its dependencies, just put them in your servers <code>mods</code> folder.</p> <p>Now you're ready for the next step.</p>"},{"location":"tutorials/testing/","title":"Testing it out","text":"<p>If you've finished setting everything up, then it's time to test and see if it works!</p> <p>First join the server. Now when you go into the resource packs menu (Esc -&gt; Options -&gt; Resource Packs), you should see the server resource pack.</p>"},{"location":"tutorials/testing/#changing-name-and-description","title":"Changing name and description","text":"<p>Let's try changing its name and description! Open up your GitHub repository and navigate to either <code>packs/0-base/pack.mcmeta</code> if using a multi pack setup or just <code>pack.mcmeta</code> if using a single pack one. There should be an edit button, click on it and change the name and description of the pack. After you've done that, you can press the <code>Commit changes..</code> button and commit your changes.</p> <p>Now when you go back into the game, you should see the message you set in the config file appear in chat.</p> <p>Once you disconnect and reconnect, navigate to the resource packs menu again, and you should hopefully see that the name and description have changed!</p>"},{"location":"tutorials/testing/#useful","title":"Useful","text":"<p>I'd recommend using the GitHub Desktop app to make your life easier when editing the pack.</p>"},{"location":"tutorials/testing/#adding-a-pack-to-a-multi-pack-setup","title":"Adding a pack to a multi pack setup","text":"<p>Let's try adding the Fresh Animations pack to our server. First download the pack itself, then you need to prefix it with a priority (which you can read more about here). For example I've renamed it to <code>10-FreshAnimations_v1.9.zip</code>. Now all you need to do is just upload this pack to your repository, and you should hopefully receive a message in chat notifying of the update. Now when you disconnect and rejoin, you should hopefully have fresh animations applied!</p>"},{"location":"tutorials/configuration/github-repo-configuration/","title":"GitHub Repository Configuration","text":"<p>The mod listens for a webhook (POST request) sent by GitHub to know when the repository is updated. The last thing you need to do now, is adding the webhook.</p> <p>You need to go to your repository page on GitHub and open the <code>Settings</code> tab. On the sidebar you need to find and click on <code>Webhooks</code>. Here click on the <code>Add webhook</code> button.</p> <p>Now that you're on the webhook creation page, you'll need to fill in some values. For <code>Payload URL</code> put <code>http://[YOUR_SERVER_IP]:[YOUR_SERVER_PORT]/gh-rp-manager</code>. For example if your server ip is <code>123.45.67.89</code>, the port <code>25565</code>, the url would be <code>http://123.45.67.89:25565/gh-rp-manager</code>.</p> <p>Then set <code>Content type</code> to <code>application/json</code>.</p> <p>This is what it should look like: </p> <p>Now you can press <code>Add webhook</code> button and you should be done!</p>"},{"location":"tutorials/configuration/github-repo-creation/","title":"GitHub Repository Creation","text":"<p>You'll need a GitHub repository to host the pack files. duh</p> <p>There are two ways the mod can operate:</p> <ul> <li> <p>Single pack mode: This is the basic option. Here the root of the repository is also the root of the resource pack. The <code>pack.mcmeta</code> file will be right in the root of the repo along with your <code>assets</code> folder.</p> </li> <li> <p>Multi pack mode (what I recommend): This is a little more advanced, but it's still easy to set up thanks to a template repo I made. Here you can have multiple resource packs! The root of your repository should include a <code>packs</code> folder which can contain <code>.zip</code> files and folders which contain the content of the packs. They do need to be prefixed with a priority. (which you can read more about here)</p> </li> </ul>"},{"location":"tutorials/configuration/github-repo-creation/#multi-pack-from-template","title":"Multi pack from template","text":"<p>I've made a nice template repository, so you can easily get started with your packs! So, what you'll need to do is visit the template here. You should see a green button that says <code>Use this template</code>. Click on it and select <code>Create a new repository</code>. This should bring you to the repository creation page. Here you can give your repository a name and, if you want, you can make it private as well.</p> <p></p> <p>Once you're done, just press the <code>Create repository</code> button.</p> <p>We will come back to the repository after configuring the mod.</p>"},{"location":"tutorials/configuration/mod-configuration/","title":"Mod Configuration","text":"<p>Once you have the mod and its dependencies installed, you can launch the server once. It should crash telling you to <code>Fill in the config file</code>. Let's do that!</p> <p>It should have generated the config file at <code>serverLocation/config/github-resourcepack-manager/github-resourcepack-manager.json</code> and it should look something like this: <pre><code>{\n    // !!!!Please check the wiki for how to set up the mod. It is linked on both the Modrinth and GitHub pages!!!!\n    \"packUpdateMessage\": \"Server resourcepack has been updated!\\nPlease click {packUpdateCommand} to get the most up to date pack.\",\n    \"packUpdateMessageHoverMessage\": \"{longDescription}\",\n    // The public ip of your server (123.45.67.89 or play.coolserver.net)\n    \"serverPublicIp\": null,\n    // Should be \"[YOUR BRANCH NAME HERE]\"\n    \"branch\": \"master\",\n    \"repoUrl\": null,\n    // Where the mod will search for resource packs in the cloned repository\n    \"resourcePackRoot\": \"\",\n    \"isRepoPrivate\": false,\n    \"githubUsername\": null,\n    // PLEASE DON'T SHARE THIS WITH ANYONE EVER\n    \"githubToken\": null,\n    \"webhookUrl\": null,\n    \"webhookBody\": null,\n    // !!!!! DO NOT MODIFY THIS VALUE !!!!\n    \"!!!version\": 1\n}\n</code></pre></p>"},{"location":"tutorials/configuration/mod-configuration/#value-types","title":"Value types","text":"<p>If you have a basic understanding of json values, you can skip this section and go straight to options.</p> <p>In the next section, I will be specifying which type an option is, but first I'll explain the different types:</p>"},{"location":"tutorials/configuration/mod-configuration/#integer","title":"Integer","text":"<p>An integer is a number without a decimal point.  </p> <p>For example <code>1234</code> is an integer, but <code>12.34</code> is not.</p>"},{"location":"tutorials/configuration/mod-configuration/#boolean","title":"Boolean","text":"<p>A boolean can be either <code>true</code> or <code>false</code>.</p>"},{"location":"tutorials/configuration/mod-configuration/#string","title":"String","text":"<p>A string represents text. The text has to be surrounded by double quotes (<code>\"</code>).</p> <p>Example of valid string: <pre><code>\"githubUrl\": \"https://github.com/OffsetMonkey538/CoolPack\"\n</code></pre></p> <p>Example of invalid string: <pre><code>\"githubUrl\": https://github.com/OffsetMonkey538/CoolPack\n</code></pre></p> <p>A string can also be <code>null</code>. Null basically means that the value doesn't exist. In most cases using <code>null</code> for a string will result in an unexpected error, but I will mark values that can be null without a crash.</p>"},{"location":"tutorials/configuration/mod-configuration/#options","title":"Options","text":""},{"location":"tutorials/configuration/mod-configuration/#packupdatemessage","title":"packUpdateMessage","text":"<p>Type: <code>String</code> Default Value: <code>\"Server resourcepack has been updated!\\nPlease rejoin the server to get the most up to date pack.\"</code> May be null: <code>no</code></p> <p>This message will be displayed after an update to the resource pack. It can contain color codes (including hex), new lines and information about the commit, which you can read more about here.</p>"},{"location":"tutorials/configuration/mod-configuration/#packupdatemessagehovermessage","title":"packUpdateMessageHoverMessage","text":"<p>Type: <code>String</code> Default Value: <code>\"{longDescription}\"</code> May be null: <code>yes</code></p> <p>This message will be displayed when a player hovers over the pack update message in chat. It may not contain color codes, but can contain new lines and information about the commit, which you can read more about here.</p>"},{"location":"tutorials/configuration/mod-configuration/#serverpublicip","title":"serverPublicIp","text":"<p>Type: <code>String</code> Default Value: <code>null</code> May be null: <code>no</code></p> <p>This is your servers public ip. This is sent to the clients, so they know where to download the pack from. For example: <code>\"1283.45.67.89\"\"</code> or <code>\"play.offsetmonkey538.top\"</code></p>"},{"location":"tutorials/configuration/mod-configuration/#branch","title":"branch","text":"<p>Type: <code>String</code> Default Value: <code>\"master\"</code> May be null: <code>no</code></p> <p>This is the git branch that the mod will download the resource pack from. Here's an image showing (in red) where the name of your branch is located: </p>"},{"location":"tutorials/configuration/mod-configuration/#repourl","title":"repoUrl","text":"<p>Type: <code>String</code> Default Value: <code>null</code> May be null: <code>no</code></p> <p>This is the url to your GitHub repository. For example: <code>\"https://github.com/OffsetMonkey538/CoolPackYay\"</code></p>"},{"location":"tutorials/configuration/mod-configuration/#resourcepackroot","title":"resourcePackRoot","text":"<p>Type: <code>String</code> Default Value: <code>\"\"</code> May be null: <code>no</code></p> <p>This is where in the repo the mod will search for the pack.mcmeta or packs directory. Only change if the resource pack isn't stored in the root of the repository.</p>"},{"location":"tutorials/configuration/mod-configuration/#isrepoprivate","title":"isRepoPrivate","text":"<p>Type: <code>Boolean</code> Default Value: <code>false</code> May be null: <code>no</code></p> <p>This tells the mod that your GitHub repository is private and that it needs to provide credentials to download it. If your GitHub repository is private, you need to set this to <code>true</code>.</p>"},{"location":"tutorials/configuration/mod-configuration/#githubusername","title":"githubUsername","text":"<p>Type: <code>String</code> Default Value: <code>null</code> May be null: <code>yes</code></p> <p>The username the mod provides for credentials when downloading a private pack. If your GitHub repository is private, you need to set this to your GitHub username.</p>"},{"location":"tutorials/configuration/mod-configuration/#githubtoken","title":"githubToken","text":"<p>Type: <code>String</code> Default Value: <code>null</code> May be null: <code>yes</code></p> <p>The token the mod provides for credentials when downloading a private pack. If your GitHub repository is private, you'll need to generate a token and paste it here. See here for how to generate a token. </p>"},{"location":"tutorials/configuration/mod-configuration/#webhookurl","title":"webhookUrl","text":"<p>Type: <code>String</code> Default Value: <code>null</code> May be null: <code>yes</code></p> <p>Webhook triggered after a pack update is finished. For example sending a message in Discord. More info here.</p>"},{"location":"tutorials/configuration/mod-configuration/#webhookbody","title":"webhookBody","text":"<p>Type: <code>String</code> Default Value: <code>null</code> May be null: <code>yes</code></p> <p>Webhook triggered after a pack update is finished. For example sending a message in Discord. More info here.</p>"},{"location":"tutorials/configuration/mod-configuration/#generating-the-token-for-private-repositories","title":"Generating the token for private repositories","text":"<p>To generate a token, go here and click the <code>Generate new token</code> button. This should bring you to the token generation page. Here you'll need to give it a name and, if you want, modify the expiration date and description.</p> <p>After that, scroll down to <code>Repository access</code>. Here you'll want to select <code>Only select repositories</code>, then click on <code>Select repositories</code> and finally search for your private resource pack repository. </p> <p>Now scroll down to <code>Permissions</code>. Here you need to click on <code>Repository permissions</code>, then find <code>Contents</code>, click on the drop-down next to it that says <code>Access: No access</code> and select <code>Read-only</code>.  </p> <p>This will give the token just enough permissions to download the repo contents, but (hopefully) not enough to do anything bad with. That being said, you should still never share any access tokens with anyone.</p> <p>After that, you can scroll down and press the green <code>Generate token</code> button. On the next page, copy the token and paste it into the config file.</p>"},{"location":"tutorials/configuration/mod-configuration/#done-d","title":"Done ;D","text":"<p>And now you can start your server and configure your GitHub repository!</p>"}]}