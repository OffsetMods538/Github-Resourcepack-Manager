import dex.plugins.outlet.v2.util.ReleaseType

plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT' apply false
	id 'io.github.dexman545.outlet' version '1.6.1' apply false
	id 'com.modrinth.minotaur' version '2.+' apply false
}

allprojects {
	group = "top.offsetmonkey538.githubresourcepackmanager"
}

subprojects {
	apply plugin: "java"

	archivesBaseName = "github-resourcepack-manager-${project.nameSuffix}"
	version = "${project.mod_version}+${project.minecraft_version}"

	java {
		withSourcesJar()
	}

	jar {
		from("${rootProject.projectDir}/LICENSE") {
			rename { "${it}" }
		}
	}
}

configure(subprojects.findAll { it.name != "common" }) {
	apply plugin: 'com.modrinth.minotaur'
	apply plugin: 'io.github.dexman545.outlet'

	outlet {
		mcVersionRange = rootProject.supported_minecraft_versions
		allowedReleaseTypes = Set.of(ReleaseType.RELEASE)
	}

	modrinth {
		token = System.getenv("MODRINTH_TOKEN")
		projectId = "github-resourcepack-manager"
		def customVersionName = System.getenv("VERSION_NAME")
		if (customVersionName != null) versionName = customVersionName
		versionNumber = "${project.version}"
		versionType = "alpha"
		def isPreRelease = System.getenv("VERSION_IS_PRERELEASE")
		versionType = !"false".equals(isPreRelease) ? "beta" : "release"
		additionalFiles = [sourcesJar.archiveFile]
		gameVersions = outlet.mcVersions()
		syncBodyFrom = rootProject.file("README.md").text
		def changelogEnv = System.getenv("VERSION_CHANGELOG")
		if (changelogEnv != null) changelog = changelogEnv

		dependencies {
			embedded.version "mesh-lib", "${project.meshlib_version}"
		}
	}
	tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

}
