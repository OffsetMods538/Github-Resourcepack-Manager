import dex.plugins.outlet.v2.util.ReleaseType

plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'io.github.dexman545.outlet' version '1.6.1'
	id 'com.modrinth.minotaur' version '2.+'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = "github-resourcepack-manager"
version = "${project.mod_version}+${project.minecraft_version}"

outlet {
	maintainPropertiesFile = System.getenv("DISABLE_PROPERTIES_UPDATE") == null
	mcVersionRange = project.supported_minecraft_versions
	allowedReleaseTypes = Set.of(ReleaseType.RELEASE)
	propertiesData = [
			'yarn_version': outlet.yarnVersion(project.minecraft_version),
			'loader_version': outlet.loaderVersion(),
			'fapi_version': outlet.fapiVersion(project.minecraft_version)
	]
}


loom {
	mods {
		modid {
			sourceSet sourceSets.main
		}
	}

	accessWidenerPath = file("src/main/resources/github-resourcepack-manager.accesswidener")

	runs {
		server {
			runDir "run/server"
		}
	}
}

// https://gist.github.com/maityyy/3dbcd558d58a6412c3a2a38c72706e8e
afterEvaluate {
	loom.runs.configureEach {
		vmArg "-javaagent:${configurations.compileClasspath.find{ it.name.contains("sponge-mixin") }}"
	}
}

configurations {
	includeModImplementation

	include.extendsFrom           includeModImplementation
	modImplementation.extendsFrom includeModImplementation


	includeImplementation

	include.extendsFrom        includeImplementation
	implementation.extendsFrom includeImplementation
}

repositories {
	mavenCentral()
	mavenLocal()
	maven {
		name = "OffsetMods538"
		url = "https://maven.offsetmonkey538.top/releases"
		content {
			includeGroup "top.offsetmonkey538.monkeylib538"
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_version}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fapi_version}"

	modImplementation "top.offsetmonkey538.monkeylib538:monkeylib538:${project.monkeylib538_version}"


	includeImplementation "org.eclipse.jgit:org.eclipse.jgit:${project.jgit_version}"

	includeImplementation "io.undertow:undertow-core:${project.undertow_version}"
	includeImplementation "jakarta.servlet:jakarta.servlet-api:${project.jakarta_servlet_api_version}"
	includeImplementation "jakarta.annotation:jakarta.annotation-api:${project.jakarta_annotation_api_version}"
	includeImplementation "jakarta.websocket:jakarta.websocket-client-api:${project.jakarta_websocket_api_version}"
	includeImplementation "org.jboss.classfilewriter:jboss-classfilewriter:${project.jboss_classfilewriter_version}"
	includeImplementation "org.jboss.logging:jboss-logging:${project.jboss_logging_version}"
	includeImplementation "org.jboss.logging:jboss-logging-processor:${project.jboss_logging_processor_version}"
	includeImplementation "org.jboss.logmanager:jboss-logmanager:${project.jboss_logmanager_version}"
	includeImplementation "org.jboss.xnio:xnio-api:${xnio_version}"
	includeImplementation "org.jboss.xnio:xnio-nio:${xnio_version}"
	includeImplementation "org.jboss.threads:jboss-threads:${project.jboss_threads_version}"
	includeImplementation "org.wildfly.common:wildfly-common:${project.wildfly_common_version}"
}

processResources {
	inputs.properties(Map.of(
			"modVersion",                 project.mod_version,
			"supportedMinecraftVersions", project.supported_minecraft_versions,
			"monkeylib538Version",        project.monkeylib538_version
	))

	filesMatching("fabric.mod.json") {
		expand(Map.of(
				"modVersion",                 project.mod_version,
				"supportedMinecraftVersions", project.supported_minecraft_versions,
				"monkeylib538Version",        project.monkeylib538_version
		))
	}

	exclude ".cache/**"
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = "github-resourcepack-manager"
	def customVersionName = System.getenv("VERSION_NAME")
	if (customVersionName != null) versionName = customVersionName
	versionNumber = "${project.version}"
	versionType = "beta"
	uploadFile = remapJar.archiveFile
	//additionalFiles = [sourcesJar.archiveFile, javadocJar.archiveFile]
	additionalFiles = [sourcesJar.archiveFile]
	gameVersions = outlet.mcVersions()
	syncBodyFrom = rootProject.file("README.md").text
	def changelogFile = rootProject.file("CHANGELOG.md")
	if (changelogFile.exists()) {
		changelog = changelogFile.text
	}

	dependencies {
		required.project "monkeylib538"
		required.project "fabric-api"
	}
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)
